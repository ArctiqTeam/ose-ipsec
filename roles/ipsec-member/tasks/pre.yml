- name: "Check for original MTU in noipsec configuration"
  stat:
    path: "/etc/origin/node/node-config.noipsec.yaml"
  register: conf_noipsec_st
  changed_when: false

- name: "Copy configuration to allow idempotent MTU subtraction and recovery if ipsec goes wrong"
  copy:
    src: "/etc/origin/node/node-config.yaml"
    dest: "/etc/origin/node/node-config.noipsec.yaml"
    remote_src: true
  when: not conf_noipsec_st.stat.exists

# copy master yaml into var
- name: "Get node configuration YAML as string"
  command: "cat /etc/origin/node/node-config.noipsec.yaml"
  register: node_yaml_cat
  changed_when: false

# convert string into yaml
- name: "Convert node configuration into yaml"
  set_fact:
    node_conf: "{{ node_yaml_cat.stdout | from_yaml }}"

# use converted yaml as source for data to change MTU
- name: "Set MTU for SDN to allow additional space for IPSec header (subtract 62 bytes)"
  lineinfile:
    path: "/etc/origin/node/node-config.yaml"
    state: present
    regexp: '^(.*)mtu:.*$'
    line: "\\1mtu: {{ node_conf.networkConfig.mtu - 62 }}"
    backrefs: yes
  register: mtu_changed

# according to the documentation we need to in-line stop and start the atomic-openshift-node service
- name: "Stop openshift node service when MTU is changed"
  service:
    name: "atomic-openshift-node"
    state: stopped
  when: mtu_changed.changed

- name: "Remove br0 (so that it can be re-added with propper mtu)"
  command: "ovs-vsctl del-br br0"
  when: mtu_changed.changed

- name: "Start openshift node service when MTU is changed"
  service:
    name: "atomic-openshift-node"
    state: started
  when: mtu_changed.changed

# all groups/peers need libreswan
- name: "Install libreswan"
  package:
    name: libreswan

# get libreswan version
- name: "Get libreswan version to decide on opportunistic or point-to-point encryption"
  command: "rpm -q libreswan --queryformat '%{VERSION}'"
  args:
    warn: false
  changed_when: false
  register: libreswan_command

- name: "Save libreswan version"
  set_fact:
    libreswan_version: "{{ libreswan_command.stdout }}"
